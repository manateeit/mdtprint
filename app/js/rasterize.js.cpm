function waitFor(testFx, onReady, timeOutMillis) {
    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 3000, //< Default Max Timout is 3s
        start = new Date().getTime(),
        condition = (typeof(testFx) === "string" ? eval(testFx) : testFx()), //< defensive code
        interval = setInterval(function() {
            if ( (new Date().getTime() - start < maxtimeOutMillis) && !condition ) {
                // If not time-out yet and condition not yet fulfilled
                condition = (typeof(testFx) === "string" ? eval(testFx) : testFx()); //< defensive code
            } else {
                if(!condition) {
                    // If condition still not fulfilled (timeout but condition is 'false')
                    console.log("'waitFor()' timeout");
                    phantom.exit(1);
                } else {
                    // Condition fulfilled (timeout and/or condition is 'true')
                    console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
                    typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
                    clearInterval(interval); //< Stop this interval
                }
            }
        }, 250); //< repeat check every 250ms
};

var page = require("webpage").create();
var system = require("system");

page.paperSize = {
    width: '6in',
    height: '4in',
    margin: {
        top: '5px',
        left: '5px',
        right: '5px',
        bottom: '5px'
    }
}

page.zoomFactor = 0.5;

page.viewportSize = {
    width: 600,
    height: 540
};

page.open(system.args[1], function (status) {

    if (status !== 'success') {
        phantom.exit();
    } else {
        waitFor(function() {
            // Check in the page if a specific element is now visible
            for ( var i = 1; i < resources.length; ++i) {
                if (resources[i] != 'end') {
                    return false;
                }
            }
            return true;
        }, function() {
            window.setTimeout(function () {
                var size = page.evaluate(function () {
                    return {width: 600, height : 540};
                });
                page.paperSize = size;
                page.render(system.args[2]);
                phantom.exit();
            }, 1000);
        })

    }
});

page.onError = function(msg, trace) {
    console.log(msg);}
